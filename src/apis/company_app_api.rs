/*
 * Company apps API
 *
 * A consumer/client app associated with a company entity. For more information,     see <a href=\"https://docs.apigee.com/api-platform/publish/creating-apps-surface-your-api\">Register apps and manage API keys</a>.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `approve_revoke_company_app`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApproveRevokeCompanyAppError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_company_app`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCompanyAppError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_company_app`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCompanyAppError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_company_app`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompanyAppError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_company_apps`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCompanyAppsError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `organizations_org_name_companies_company_name_apps_app_name_put`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationsOrgNameCompaniesCompanyNameAppsAppNamePutError {
    Status400(),
    UnknownValue(serde_json::Value),
}


/// Sets the API key status of a company app to `approved` or `revoked`. If a company app is revoked, none of its API keys are valid for API calls, even though the keys themselves still display an \"Approved\" status. The HTTP status code for success is: `204 No Content`.
pub async fn approve_revoke_company_app(configuration: &configuration::Configuration, org_name: &str, company_name: &str, app_name: &str, action: &str) -> Result<(), Error<ApproveRevokeCompanyAppError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/organizations/{org_name}/companies/{company_name}/apps/{app_name}", configuration.base_path, org_name=crate::apis::urlencode(org_name), company_name=crate::apis::urlencode(company_name), app_name=crate::apis::urlencode(app_name));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("action", &action.to_string())]);
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<ApproveRevokeCompanyAppError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Creates an app associated with a company, associates the app with an API product, and auto-generates an API key for the app to use in calls to API proxies inside the API product. You must create a profile for the company in your organization before you can register apps that are associated with the company.  **Ensure optimal API product and app security**  An organization-level property, `features.keymanagement.disable.unbounded.permissions`, strengthens the security of API products in verifying API calls. When the property is set to `true`, the following features are enforced.  * **App creation**: When creating a developer or company app, the Edge API requires that the app be associated with an API product. (The Edge UI already enforces this.)   * **API product configuration**: To create or update an API product, the API product must include at least one API proxy or a resource path in its definition.  * **Runtime security**: API calls are rejected by an API product in the following situations:    * An API product doesn't include at least one API proxy or resource path.     * If the `flow.resource.name` variable in the message doesn't include a resource path that the API product can evaluate.    * If the app making the API call isn't associated with an API product.   **Note:** Setting this organization property requires system administrator rights. Edge for Private Cloud system administrators can make add this property on their own with the Update organization properties API. If you are an Edge for Public Cloud user and the previously described restrictions are not in place, contact Apigee Support to set the organization property for you.
pub async fn create_company_app(configuration: &configuration::Configuration, org_name: &str, company_name: &str, company_app: Option<crate::models::CompanyApp>) -> Result<crate::models::CompanyApp, Error<CreateCompanyAppError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/organizations/{org_name}/companies/{company_name}/apps", configuration.base_path, org_name=crate::apis::urlencode(org_name), company_name=crate::apis::urlencode(company_name));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&company_app);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateCompanyAppError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes a company app.
pub async fn delete_company_app(configuration: &configuration::Configuration, org_name: &str, company_name: &str, app_name: &str) -> Result<crate::models::CompanyApp, Error<DeleteCompanyAppError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/organizations/{org_name}/companies/{company_name}/apps/{app_name}", configuration.base_path, org_name=crate::apis::urlencode(org_name), company_name=crate::apis::urlencode(company_name), app_name=crate::apis::urlencode(app_name));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteCompanyAppError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets the profile for a company app.
pub async fn get_company_app(configuration: &configuration::Configuration, org_name: &str, company_name: &str, app_name: &str) -> Result<crate::models::CompanyApp, Error<GetCompanyAppError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/organizations/{org_name}/companies/{company_name}/apps/{app_name}", configuration.base_path, org_name=crate::apis::urlencode(org_name), company_name=crate::apis::urlencode(company_name), app_name=crate::apis::urlencode(app_name));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompanyAppError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists company apps in an organization. Optionally, you can expand the response to include the profile for each app.  With Apigee Edge for Public Cloud: * A maximum of 100 company apps are returned per API call. * You can paginate the list of company apps returned using the `startKey` and `count` query parameters.
pub async fn list_company_apps(configuration: &configuration::Configuration, org_name: &str, company_name: &str, expand: Option<bool>, key_status: Option<&str>, count: Option<i32>, start_key: Option<&str>) -> Result<crate::models::CompanyApps, Error<ListCompanyAppsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/organizations/{org_name}/companies/{company_name}/apps", configuration.base_path, org_name=crate::apis::urlencode(org_name), company_name=crate::apis::urlencode(company_name));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = expand {
        local_var_req_builder = local_var_req_builder.query(&[("expand", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key_status {
        local_var_req_builder = local_var_req_builder.query(&[("keyStatus", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = count {
        local_var_req_builder = local_var_req_builder.query(&[("count", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_key {
        local_var_req_builder = local_var_req_builder.query(&[("startKey", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListCompanyAppsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates an existing company app. **Note**: You must include all current attribute, API product, and callback values in the payload along with any changes you want to make; otherwise, the existing values are removed. To display the current values, see Get the company app API.
pub async fn organizations_org_name_companies_company_name_apps_app_name_put(configuration: &configuration::Configuration, org_name: &str, company_name: &str, app_name: &str, company_app: Option<crate::models::CompanyApp>) -> Result<crate::models::CompanyApp, Error<OrganizationsOrgNameCompaniesCompanyNameAppsAppNamePutError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/organizations/{org_name}/companies/{company_name}/apps/{app_name}", configuration.base_path, org_name=crate::apis::urlencode(org_name), company_name=crate::apis::urlencode(company_name), app_name=crate::apis::urlencode(app_name));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&company_app);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OrganizationsOrgNameCompaniesCompanyNameAppsAppNamePutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

