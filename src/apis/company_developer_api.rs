/*
 * Company Developers API
 *
 * Associate developers with a company.  The company developer creates apps on behalf of the company. Any apps created by a company developer are associated with the company and known as \"company apps.\"  A developer must exist before you can associate them with a company.  When you add a developer to a company, you specify the developer's email and assign the developer a role. Company developer roles are enforced by the client app that you build using the API, not by Apigee. Therefore, when you retrieve a list of company apps on behalf of a developer, it is your code that checks the developer's role and displays the capabilities appropriate for that role. You typically create an admin role to allow a company developer to add other developers, delete company apps, and so on. Company developers are mapped to developers in your organization using the developer email as a key. The mapping associates the developer with the company and adds a role. The company developer entity simply stores an email address and a role while the organization developer entity that it maps to can have a wide variety of attributes defined.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `add_update_company_developers`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddUpdateCompanyDevelopersError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_developers_company`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListDevelopersCompanyError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `remove_developer_company`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveDeveloperCompanyError {
    Status400(),
    UnknownValue(serde_json::Value),
}


/// Adds a developer to a company, or updates an existing developer in the company.  Optionally, you can assign a role to the developer, though it is not required. You can create roles for your partners, such as administrator or application developer. Those roles can then be assigned to specific partner employees.  When updating an existing developer, specify both the developer's email and role (if applicable).
pub async fn add_update_company_developers(configuration: &configuration::Configuration, org_name: &str, company_name: &str, company_developers: Option<crate::models::CompanyDevelopers>) -> Result<crate::models::CompanyDevelopers, Error<AddUpdateCompanyDevelopersError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/organizations/{org_name}/companies/{company_name}/developers", configuration.base_path, org_name=crate::apis::urlencode(org_name), company_name=crate::apis::urlencode(company_name));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&company_developers);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddUpdateCompanyDevelopersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists developers in a company.
pub async fn list_developers_company(configuration: &configuration::Configuration, org_name: &str, company_name: &str) -> Result<crate::models::CompanyDevelopers, Error<ListDevelopersCompanyError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/organizations/{org_name}/companies/{company_name}/developers", configuration.base_path, org_name=crate::apis::urlencode(org_name), company_name=crate::apis::urlencode(company_name));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListDevelopersCompanyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Removes a developer from a company.
pub async fn remove_developer_company(configuration: &configuration::Configuration, org_name: &str, company_name: &str, developer_email: &str) -> Result<(), Error<RemoveDeveloperCompanyError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/organizations/{org_name}/companies/{company_name}/developers/{developer_email}", configuration.base_path, org_name=crate::apis::urlencode(org_name), company_name=crate::apis::urlencode(company_name), developer_email=crate::apis::urlencode(developer_email));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<RemoveDeveloperCompanyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

